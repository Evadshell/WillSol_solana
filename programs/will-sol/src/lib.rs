#![allow(clippy::result_large_err)]

use anchor_lang::prelude::*;
use anchor_spl::{
    associated_token::AssociatedToken,
    metadata::{
        create_metadata_accounts_v3, mpl_token_metadata::types::DataV2,
        CreateMetadataAccountsV3, Metadata,
    },
    token::{mint_to, Mint, MintTo, Token, TokenAccount},
};

declare_id!("7rqSkHiGHGJEbTNsQsDKEfkdxdqcx9EyTPdKW3Vju7um");

#[program]
pub mod will_sol {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {
        let token_state = &mut ctx.accounts.token_state;
        token_state.authority = ctx.accounts.payer.key();
        ctx.accounts.token_state.bump = ctx.bumps.token_state;
        Ok(())
    }

    pub fn create_token(
        ctx: Context<CreateToken>,
        token_name: String,
        token_symbol: String,
        token_uri: String,
    ) -> Result<()> {
        let signer_seeds: &[&[&[u8]]] = &[&[
            b"token_state",
            ctx.accounts.token_state.authority.as_ref(),
            &[ctx.accounts.token_state.bump],
        ]];

        create_metadata_accounts_v3(
            CpiContext::new(
                ctx.accounts.token_metadata_program.to_account_info(),
                CreateMetadataAccountsV3 {
                    metadata: ctx.accounts.metadata_account.to_account_info(),
                    mint: ctx.accounts.mint_account.to_account_info(),
                    mint_authority: ctx.accounts.token_state.to_account_info(),
                    update_authority: ctx.accounts.token_state.to_account_info(),
                    payer: ctx.accounts.payer.to_account_info(),
                    system_program: ctx.accounts.system_program.to_account_info(),
                    rent: ctx.accounts.rent.to_account_info(),
                },
            )
            .with_signer(signer_seeds),
            DataV2 {
                name: token_name,
                symbol: token_symbol,
                uri: token_uri,
                seller_fee_basis_points: 0,
                creators: None,
                collection: None,
                uses: None,
            },
            false,
            true,
            None,
        )?;

        msg!("Token created successfully");
        Ok(())
    }

    pub fn mint_token(ctx: Context<MintToken>, amount: u64) -> Result<()> {
        let signer_seeds: &[&[&[u8]]] = &[&[
            b"token_state",
            ctx.accounts.token_state.authority.as_ref(),
            &[ctx.accounts.token_state.bump],
        ]];

        mint_to(
            CpiContext::new(
                ctx.accounts.token_program.to_account_info(),
                MintTo {
                    mint: ctx.accounts.mint_account.to_account_info(),
                    to: ctx.accounts.associated_token_account.to_account_info(),
                    authority: ctx.accounts.token_state.to_account_info(),
                },
            )
            .with_signer(signer_seeds),
            amount * 10u64.pow(ctx.accounts.mint_account.decimals as u32),
        )?;

        msg!("Tokens minted successfully");
        Ok(())
    }
}

#[account]
pub struct TokenState {
    pub authority: Pubkey,
    pub bump: u8,
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(
        init,
        payer = payer,
        space = 8 + 32 + 1,
        seeds = [b"token_state", payer.key().as_ref()],
        bump
    )]
    pub token_state: Account<'info, TokenState>,
    #[account(mut)]
    pub payer: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct CreateToken<'info> {
    #[account(
        mut,
        seeds = [b"token_state", token_state.authority.as_ref()],
        bump = token_state.bump
    )]
    pub token_state: Account<'info, TokenState>,
    #[account(
        init,
        payer = payer,
        mint::authority = token_state,
        mint::decimals = 9,
        mint::freeze_authority = token_state,
    )]
    pub mint_account: Account<'info, Mint>,
    #[account(
        mut,
        seeds = [
            b"metadata",
            token_metadata_program.key().as_ref(),
            mint_account.key().as_ref()
        ],
        bump,
        seeds::program = token_metadata_program.key()
    )]
    /// CHECK: This account is safe as it will always be a valid metadata account generated by the 
/// `create_metadata_accounts_v3` instruction. The safety checks are handled by the Token Metadata 
/// program and are not necessary here.
    pub metadata_account: UncheckedAccount<'info>,
    #[account(mut)]
    pub payer: Signer<'info>,
    pub token_program: Program<'info, Token>,
    pub token_metadata_program: Program<'info, Metadata>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct MintToken<'info> {
    #[account(
        mut,
        seeds = [b"token_state", token_state.authority.as_ref()],
        bump = token_state.bump
    )]
    pub token_state: Account<'info, TokenState>,
    #[account(mut)]
    pub mint_account: Account<'info, Mint>,
    #[account(
        init_if_needed,
        payer = payer,
        associated_token::mint = mint_account,
        associated_token::authority = payer,
    )]
    pub associated_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub payer: Signer<'info>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub system_program: Program<'info, System>,
}
